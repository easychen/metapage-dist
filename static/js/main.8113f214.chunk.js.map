{"version":3,"sources":["screen/Editor.js","component/Hello.js","screen/Login.js","screen/Index.js","App.js","serviceWorker.js","store/AppState.js","index.js"],"names":["Editor","inject","withRouter","observer","window","addEventListener","e","keydown","location","reload","keyname","this","props","match","params","key","store","prekey","load_vars","meta_code","length","tpl_code","out_code","function_code","save_vars","removeEventListener","metaKey","build","stopPropagation","preventDefault","editor","name","setTimeout","refs","layout","value","type","set_var","meta","JSON","parse","out","cnt","eval","toString","ejs","render","error","data","to_save_vars","forEach","thevar","saveAs","Blob","stringify","files","thefile","text","save_var","metabox","className","Classes","MINIMAL","icon","onClick","ref","width","height","language","theme","options","editorDidMount","porps","onChange","tplbox","current_lang","langs","target","outbox","alignment","Alignment","RIGHT","export","fileTypes","handleFiles","import","layout_class","main","title","appname","Component","Hello","Login","history","push","App","path","component","Boolean","hostname","v","ret","localStorage","getItem","APP_VAR_PREFIX","field","vars_array","setItem","observable","ReactDOM","AppState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8113f214.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer , inject } from 'mobx-react';\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from 'react-router-dom';\nimport DocumentTitle from 'react-document-title';\nimport 'react-mosaic-component/react-mosaic-component.css';\nimport { Mosaic } from 'react-mosaic-component';\nimport {\n    Alignment,\n    Button,\n    Classes,\n    H5,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    HTMLSelect,\n} from \"@blueprintjs/core\";\nimport MonacoEditor from 'react-monaco-editor';\nimport ejs from 'ejs';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { saveAs } from 'file-saver';\nimport ReactFileReader from 'react-file-reader';\n\n@withRouter\n@inject(\"store\")\n@observer\nexport default class Editor extends Component\n{\n    // constructor(props) \n    // {\n    //     super(props);\n    // }\n    \n    componentDidMount()\n    {\n        window.addEventListener( 'keydown' , (e) => this.keydown(e)  );\n        window.addEventListener( 'resize' , ()=>window.location.reload() );\n\n        const keyname = this.props.match.params.key || \"\" ;\n        // console.log( keyname );\n        this.props.store.prekey = keyname;\n        this.props.store.load_vars();\n\n        if( this.props.store.meta_code.length < 1 && this.props.store.tpl_code.length < 1 && this.props.store.tpl_code.length < 1 && this.props.store.out_code.length < 1  )\n        {\n            this.props.store.meta_code = `\n{\n    \"author\":\"Easy\",\n    \"contacts\":\n    [\n        {\"HP\":\"https://ftqq.com\"},\n        {\"weibo\":\"https://weibo.com\"},\n        {\"twitter\":\"https://twitter.com/easychen\"}\n    ]\n}\n            `;\n\n            this.props.store.tpl_code = `\n/* MetaPage 由 <%=author%> 开发，方糖气球🎈（<%=this.first(contacts).HP%>）出品。\n模板部分采用 ejs 语法( https://github.com/mde/ejs )  \n*/\n`;\n            this.props.store.function_code = `\n{\n    first( contacts )\n    {\n        return contacts[0];\n    }\n}                \n            `;\n\n            this.props.store.out_code = `\n// 点击「生成」获取最终代码。点「复制」将其复制到剪贴板。网址后输入不同的路径如：/abc 可以生成不同的 MetaPage。数据存储在浏览器的 localStorage，可通过菜单导入和导出。             \n            `;\n\n            this.props.store.save_vars();\n        }        \n    }\n\n    componentWillUnmount()\n    {\n        window.removeEventListener( 'keydown' , (e) => this.keydown(e)  );\n        window.removeEventListener( 'resize' , ()=>window.location.reload() );\n    }\n\n    keydown( e )\n    {\n        // console.log( e );\n        if( e.metaKey && e.key == 's' )\n        {\n            this.build();\n            e.stopPropagation();\n            e.preventDefault();\n\n        }\n    }\n\n    editorDidMount(editor, name) \n    {\n        //console.log( name , this.refs );\n        window.setTimeout( ()=>{\n            if( this.refs[name] )\n        this.refs[name].editor.layout();\n        }, 100 );\n        \n         \n        // if( !this.editors ) this.editors = [];\n        // this.editors.push(editor);\n        // console.log( this.editors );\n    }\n\n    onChange( value , type )\n    {\n        this.props.store.set_var(type + '_code', value);\n    }\n\n    async build()\n    {\n        // 构建代码\n        let meta = JSON.parse( this.props.store.meta_code );\n        let out = '';\n        let cnt = {};\n        \n        if( this.props.store.function_code.length > 0 )\n        {\n            // 将其创建为 dataurl，然后用 import 载入进来\n            try {\n                eval(`cnt = ${this.props.store.function_code}`);\n                // console.log( cnt.get_book );\n            } catch (error) {\n                out = error.toString();\n                this.props.store.set_var('out_code', out );\n                return false;\n            }\n        }\n        \n\n        try {\n            out = ejs.render( this.props.store.tpl_code,meta, {\"context\":cnt} );\n        } catch (error) {\n            out = error.toString();\n        }\n        //console.log( JSON.parse(this.props.store.meta_code) );\n        this.props.store.set_var('out_code', out );\n    }\n\n    export()\n    {\n        let data = {};\n\n        this.props.store.to_save_vars.forEach( thevar => data[thevar] = this.props.store[thevar] );\n\n        \n        saveAs( new Blob([JSON.stringify(data)], {\n            type: \"text/json;charset=utf-8\"\n          }) , 'MetaPage.'+(this.props.prekey? \".\"+this.props.prekey :\"\")+'.json' )  ;\n    }\n\n    async import( files )\n    {\n        const thefile = files[0];\n        const data = JSON.parse(await thefile.text());\n        if( data )\n        {\n            this.props.store.to_save_vars.forEach( thevar => \n            {\n                this.props.store[thevar] = data[thevar];\n            });\n            this.props.store.save_vars();\n        }\n    }\n\n    // componentDidUpdate( prevProps )\n    // {\n    //     if (this.props.data !== prevProps.data) \n    //     {\n    //         this.relayout();    \n    //     }    \n    // }\n\n    relayout()\n    {\n        // ['meta','function','out','tpl'].forEach( thetype => {\n        //     this.refs[thetype].editor.layout(); \n        // } );\n\n        window.location.reload();\n    }\n\n    layout()\n    {\n        this.props.store.save_var( 'layout' , this.props.store.layout == 'col' ? 'row' : 'col' );\n\n        window.location.reload();\n        //window.setTimeout(()=>this.relayout(), 100);\n    }\n\n    render()\n    {\n        \n        const metabox = <div className=\"ft-col row2\">\n            <div className=\"json\">\n            <Navbar className={\"bp3-dark\"}>\n                <NavbarGroup >\n                    <NavbarHeading>MetaPage · 元数据 · JSON</NavbarHeading>\n                    <Button className={Classes.MINIMAL} icon=\"pivot-table\" onClick={()=>this.layout()}/>\n                    {/* <Button className={Classes.MINIMAL} icon=\"home\" text=\"Home\" /> */}\n                </NavbarGroup>\n            </Navbar>\n            <MonacoEditor\n            ref=\"meta\"\n            width=\"100%\"\n            height=\"calc( 100% - 50px )\"\n            language=\"json\"\n            theme=\"vs-dark\"\n            value={this.props.store.meta_code}\n            options={{\n                    \"fontSize\":14,\n                    \"lineNumbers\":\"off\",\n                    \"wordWrap\":\"on\",\n                    \"minimap\":{\"enabled\":false}\n                }}\n\n            editorDidMount={(...porps)=>this.editorDidMount({...porps},'meta')} \n            onChange={ value => this.onChange( value , 'meta' )}\n\n            />\n            </div>\n            <div className=\"function\">\n            <Navbar className={\"bp3-dark\"}>\n                <NavbarGroup >\n                    <NavbarHeading>公用对象 · this </NavbarHeading>\n                    {/* <NavbarDivider /> */}\n                    {/* <Button className={Classes.MINIMAL} icon=\"home\" text=\"Home\" /> */}\n                </NavbarGroup>\n            </Navbar>\n            <MonacoEditor\n            ref=\"function\"\n            width=\"100%\"\n            height=\"calc( 100% - 50px )\"\n            language=\"javascript\"\n            theme=\"vs-dark\"\n            value={this.props.store.function_code}\n            options={{\n                    \"fontSize\":14,\n                    \"lineNumbers\":\"off\",\n                    \"wordWrap\":\"on\",\n                    \"minimap\":{\"enabled\":false}\n                }}\n\n            editorDidMount={(...porps)=>this.editorDidMount({...porps},'function')} \n            onChange={ value => this.onChange( value , 'function' )}\n\n            />\n            </div>\n        </div>;\n\n        const tplbox = <div className=\"ft-col\">\n        <Navbar className={\"bp3-dark\"}>\n            <NavbarGroup >\n                <NavbarHeading>模板</NavbarHeading>\n                <NavbarDivider />\n                <HTMLSelect value={this.props.store.current_lang} options={this.props.store.langs} onChange={(e)=>\n                    {\n                        if( e.target.value )\n                            this.props.store.set_var( 'current_lang' , e.target.value );\n                        // console.log(e.target.value);\n                    }}/>\n                \n                {/* <Button className={Classes.MINIMAL} icon=\"home\" text=\"Home\" /> */}\n            </NavbarGroup>\n        </Navbar>\n        <MonacoEditor\n        ref=\"tpl\"\n        width=\"100%\"\n        height=\"calc( 100% - 50px )\"\n        language={this.props.store.current_lang}\n        theme=\"vs-dark\"\n        value={this.props.store.tpl_code}\n        options={{\n                \"fontSize\":14,\n                \"lineNumbers\":\"off\",\n                \"wordWrap\":\"on\",\n                \"minimap\":{\"enabled\":false}\n            }}\n        editorDidMount={(...porps)=>this.editorDidMount({...porps},'tpl')} \n        onChange={ value => this.onChange( value , 'tpl' )}\n\n        />\n    </div>;\n        const outbox = <div className=\"ft-col\">\n        <Navbar alignment={Alignment.RIGHT} className={\"bp3-dark\"}>\n            <NavbarGroup >\n            <Button className={Classes.MINIMAL} icon=\"build\" text=\"生成\" onClick={()=>this.build()}/>\n            <CopyToClipboard text={this.props.store.out_code}>\n                <Button className={Classes.MINIMAL} icon=\"clipboard\" text=\"复制\"  />\n            </CopyToClipboard>\n            \n            <Button className={Classes.MINIMAL} icon=\"download\"  onClick={()=>this.export()} text=\"导出\"/>\n\n            <ReactFileReader fileTypes={[\".json\"]} handleFiles={(e)=>this.import(e)}><Button className={Classes.MINIMAL} icon=\"upload\" text=\"导入\"/></ReactFileReader>\n            \n            \n                \n                \n            </NavbarGroup>\n        </Navbar>\n        <MonacoEditor\n        ref=\"out\"\n        width=\"100%\"\n        height=\"calc( 100% - 50px )\"\n        language={this.props.store.current_lang}\n        theme=\"vs-dark\"\n        value={this.props.store.out_code}\n        options={{\n                \"fontSize\":14,\n                \"lineNumbers\":\"off\",\n                \"wordWrap\":\"on\",\n                \"minimap\":{\"enabled\":false}\n            }}\n        editorDidMount={(...porps)=>this.editorDidMount({...porps},'out')}\n        onChange={ value => this.onChange( value , 'out' )} \n\n        />\n    </div>;\n\n        const layout_class = this.props.store.layout == 'col' ? 'col' : 'row';\n        \n        const main = <div className={\"editorbox \" + layout_class }>\n            {metabox}{tplbox}{outbox}\n        </div>;\n        return <DocumentTitle title={this.props.store.appname}>{main}</DocumentTitle>;\n    }\n}","import React, { Component } from 'react';\nimport { observer , inject } from 'mobx-react';\n\n@inject(\"store\")\n@observer\nexport default class Hello extends Component\n{\n    render()\n    {\n        return <div className=\"title\"><h1>Hello，{this.props.store.appname}</h1></div>;\n    }\n}","import React, { Component } from 'react';\n\nexport default class Login extends Component\n{\n    render()\n    {\n        return <h1>Login form</h1>;\n    }\n} ","import React, { Component } from 'react';\nimport Hello from '../component/Hello';\nimport { inject } from 'mobx-react';\nimport { withRouter,Link } from 'react-router-dom';\nimport { Button, Intent, Spinner } from '@blueprintjs/core';\n\n@withRouter\n@inject(\"store\")\nexport default class Index extends Component\n{\n    render()\n    {\n        return <div>\n            <h1><Hello/></h1>\n            <div><Button onClick={()=>this.props.store.appname+='🎈'}>change</Button></div>\n            <div><span onClick={()=>this.props.history.push(\"/login\")}>Login</span></div>\n\n        </div>;\n    }\n} ","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Index from './screen/Index';\nimport Login from './screen/Login';\nimport Editor from './screen/Editor'; \n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/:key?\" component={Editor} />\n        </Switch>\n      </Router>  \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable } from \"mobx\";\nconst APP_VAR_PREFIX = 'METAPAGE_';\n\nclass AppState\n{\n    @observable appname = \"🎈MetaPage By Easy\";\n    \n    @observable meta_code = \"\";\n    @observable tpl_code = \"\";\n    @observable out_code = \"\";\n    @observable function_code = \"\";\n    @observable layout = \"col\";\n\n    @observable langs = ['php','javascript','css','markdown','mysql','dart','go','graphql','html','java','kotlin','less','lua','pug','python','ruby','rust','shell','swift','twig','typescript','yaml'];\n    @observable current_lang = \"javascript\";\n\n    @observable prekey = '';\n    \n    to_save_vars = ['meta_code','tpl_code','out_code','function_code','current_lang','layout'];\n    \n    constructor()\n    {\n        // this.load_vars();\n    }\n\n    load_vars()\n    {\n        this.to_save_vars.forEach( v =>\n        {\n            const ret = window.localStorage.getItem(APP_VAR_PREFIX+'-'+this.prekey+'-'+v);\n            if( ret ) this[v] = JSON.parse( ret );\n        });\n    }\n\n    save_vars( field = null )\n    {\n        const vars_array = field === null ? this.to_save_vars : [field];\n        vars_array.forEach( v =>\n        {\n            window.localStorage.setItem(APP_VAR_PREFIX+'-'+this.prekey+'-'+v, JSON.stringify( this[v] ));\n        });\n    }\n\n    set_var( field , value = null )\n    {\n        this[field] = value;\n        this.save_vars(field);\n    }\n\n    save_var( field , value = null )\n    {\n        window.localStorage.setItem(APP_VAR_PREFIX+'-'+this.prekey+'-'+field, JSON.stringify( value ));\n    }\n}\n\nexport default new AppState();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"mobx-react\";\nimport AppState from './store/AppState';\n\nReactDOM.render( <Provider store={AppState}><App /></Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}